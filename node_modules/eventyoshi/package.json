{
  "_args": [
    [
      {
        "raw": "eventyoshi@^0.1.4",
        "scope": null,
        "escapedName": "eventyoshi",
        "name": "eventyoshi",
        "rawSpec": "^0.1.4",
        "spec": ">=0.1.4 <0.2.0",
        "type": "range"
      },
      "/Users/kanchibhawalkar/Desktop/MagicMirror/node_modules/feedme"
    ]
  ],
  "_from": "eventyoshi@>=0.1.4 <0.2.0",
  "_id": "eventyoshi@0.1.6",
  "_inCache": true,
  "_location": "/eventyoshi",
  "_npmUser": {
    "name": "fent",
    "email": "roly426@gmail.com"
  },
  "_npmVersion": "1.2.14",
  "_phantomChildren": {},
  "_requested": {
    "raw": "eventyoshi@^0.1.4",
    "scope": null,
    "escapedName": "eventyoshi",
    "name": "eventyoshi",
    "rawSpec": "^0.1.4",
    "spec": ">=0.1.4 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/feedme"
  ],
  "_resolved": "https://registry.npmjs.org/eventyoshi/-/eventyoshi-0.1.6.tgz",
  "_shasum": "cc5395c612e5b531f6692f08fc9f430e9b14e7ad",
  "_shrinkwrap": null,
  "_spec": "eventyoshi@^0.1.4",
  "_where": "/Users/kanchibhawalkar/Desktop/MagicMirror/node_modules/feedme",
  "author": {
    "name": "Roly Fentanes",
    "url": "https://github.com/fent"
  },
  "bugs": {
    "url": "https://github.com/fent/node-eventyoshi/issues"
  },
  "dependencies": {},
  "description": "Allows several event emitters to be listened and emitted through a single one.",
  "devDependencies": {
    "mocha": "x"
  },
  "directories": {
    "lib": "./lib"
  },
  "dist": {
    "shasum": "cc5395c612e5b531f6692f08fc9f430e9b14e7ad",
    "tarball": "https://registry.npmjs.org/eventyoshi/-/eventyoshi-0.1.6.tgz"
  },
  "homepage": "https://github.com/fent/node-eventyoshi#readme",
  "keywords": [
    "event",
    "emitter",
    "eventemitter",
    "router",
    "proxy"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/fent/node-eventyoshi/raw/master/LICENSE"
    }
  ],
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "fent",
      "email": "roly426@gmail.com"
    }
  ],
  "name": "eventyoshi",
  "optionalDependencies": {},
  "readme": "# eventyoshi [![Build Status](https://secure.travis-ci.org/fent/node-eventyoshi.png)](http://travis-ci.org/fent/node-eventyoshi)\n\nAllows several event emitters to be handled and emitting to a single one.\n\n![concept](https://github.com/fent/node-eventyoshi/raw/master/img/yoshi.png)\n\n# Usage\n\n```js\nvar EventEmtter = require('events').EventEmitter\n  , EventYoshi = require('eventyoshi')\n\nvar ee1 = new EventEmitter();\nvar ee2 = new EventEmitter();\nvar yoshi = new EventYoshi()\n  .add(ee1)\n  .add(ee2)\n\nyoshi.on('foo', function() {\n  console.log('foo!');\n});\nee1.emit('foo'); // foo!\nee2.emit('foo'); // foo!\n```\n\n\n# Why?\nWhy would you use this instead of doing something like\n\n```js\nee1.on('foo', listener);\nee2.on('foo', listener);\n```\n\nWell, you could do that, or you could let EventYoshi handle all the logic for you flawlessly and without modifying the underlying child event emitters. EventYoshi can be treated as another EventEmitter. You can pass it around without having to tell whoever you passed it to what emitters you're listening to and which you aren't listening to anymore.\n\nSame goes for events you might listen to or remove later. As you add more event emitters to event yoshi, it will add listeners that you were already listening for to the emitter you added.\n\n```js\nvar yoshi = new EventYoshi();\nyoshi.on('a', function() {\n  console.log('a emitted');\n});\n\nvar ee = new EventEmitter();\nyoshi.add(ee);\n\nee.emit('a'); // a emitted\n```\n\nAnd as you remove emitters, all listeners that were added through event yoshi are removed too.\n\n```js\nyoshi.remove(ee);\nee.emit('a'); // nothing emitted on yoshi\n```\n\nEventYoshi also supports the `once` method. It supports listening to `newListener` such that it is emitted only when listeners are added to your EventYoshi instance and not when they are added to child emitters.\n\n\n# API\n\n### yoshi.add(emitter)\nAdds an event emitter to an event yoshi.\n\n### yoshi.remove(emitter)\nRemove an event emitter from an event yoshi.\n\n### yoshi.proxy(fn)\nProxies all calls from to `yoshi[fn]` to its children.\n```js\nyoshi.add(writeStream);\nyoshi.proxy('write', 'end');\n\nyoshi.write(data); // this will call writeStream.write() with data\nyoshi.end(); // will call writeStream.end()\n```\n\nWhen the proxy'd functions are called, they return the values returned from called functions in an array. If the array's length is only 1, returns only the first value.\n\n\n## Events\n\nWhen events are emitted, `this.child` will contain the child emitter the event came from. Or in case of `newListener` event, will contain the event yoshi itself.\n\n```js\nyoshi.on('event', function() {\n  console.log('Event came from: ', this.child);\n});\n```\n\n### Event: 'newListener'\n* `string` - Event.\n* `Function` - Listener.\n\nEmitted when a listener is added to an event yoshi.\n\n### Event:  'newChildListener'\n* `string` - Event.\n* `Function` - Listener.\n\nEmitted when a listener is added to an event emitter that has been added to, and not removed from, an event yoshi. Does not emit listeners added by EventYoshi.\n\n\n# Install\n\n    npm install eventyoshi\n\n\n# Tests\nTests are written with [mocha](http://visionmedia.github.com/mocha/)\n\n```bash\nnpm test\n```\n\n# License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/fent/node-eventyoshi.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "version": "0.1.6"
}
